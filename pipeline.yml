steps:
  - key: "build-darwin-aarch64"
    group: "Build darwin-aarch64"
    steps:
      - label: "Build Zig"
        agents:
          os: "linux"
          arch: "x64"
        artifact_paths:
          - "release/bun-zig.o"
        command: |
          docker buildx build . \
            --platform="linux/amd64" \
            --target="build_release_obj" \
            --output="type=local,dest=release" \
            --build-arg="GIT_SHA=$(git rev-parse HEAD)" \
            --build-arg="TRIPLET=aarch64-macos-none" \
            --build-arg="ARCH=aarch64" \
            --build-arg="BUILDARCH=arm64" \
            --build-arg="BUILD_MACHINE_ARCH=x86_64" \
            --build-arg="CPU_TARGET=native" \
            --build-arg="ASSERTIONS=OFF" \
            --build-arg="ZIG_OPTIMIZE=ReleaseFast" \
            --build-arg="CANARY=1" \
            --progress="plain"
      - label: "Build base64"
        agents:
          os: "darwin"
          arch: "aarch64"
        env:
          CPU_TARGET: "native"
        command: |
          ./scripts/build-base64.sh

      # - label: "Build C++"
      #   agents:
      #     os: "darwin"
      #     arch: "aarch64"
      #   artifact_paths:
      #     - "$$OBJ_DIR/bun-cpp-objects.a"
      #   env:
      #     CPU_TARGET: "native"
      #     BUN_DEPS_OUT_DIR: "bun-deps"
      #     OBJ_DIR: "bun-ccp-obj"
      #   command: |
      #     mkdir -p $$OBJ_DIR
      #     cd $$OBJ_DIR
      #     cmake -S . -B $$OBJ_DIR \
      #       -G Ninja \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -DUSE_LTO=ON \
      #       -DBUN_CPP_ONLY=1 \
      #       -DNO_CONFIGURE_DEPENDS=1
      #     chmod +x compile-cpp-only.sh
      #     ./compile-cpp-only.sh -v
  # - label: "Build linux-x64"
  #   agents:
  #     os: "linux"
  #     arch: "x64"
  #   artifact_paths:
  #     - "release/bun-linux-x64.zip"
  #   command: |
  #     docker buildx build . \
  #       --platform="linux/amd64" \
  #       --target="artifact" \
  #       --output="type=local,dest=release" \
  #       --build-arg="GIT_SHA=$(git rev-parse HEAD)" \
  #       --build-arg="TRIPLET=x86_64-linux-gnu" \
  #       --build-arg="ARCH=x86_64" \
  #       --build-arg="BUILDARCH=amd64" \
  #       --build-arg="BUILD_MACHINE_ARCH=x86_64" \
  #       --build-arg="CPU_TARGET=haswell" \
  #       --build-arg="ASSERTIONS=OFF" \
  #       --build-arg="ZIG_OPTIMIZE=ReleaseFast" \
  #       --build-arg="CANARY=1" \
  #       --progress="plain"
  #     cd release
  #     chmod +x bun-profile bun
  #     mkdir bun-linux-x64-profile
  #     mkdir bun-linux-x64
  #     strip bun
  #     mv bun-profile bun-linux-x64-profile/bun-profile
  #     mv bun bun-linux-x64/bun
  #     zip -r bun-linux-x64-profile.zip bun-linux-x64-profile
  #     zip -r bun-linux-x64.zip bun-linux-x64
  # - label: "Build linux-x64-baseline"
  #   agents:
  #     os: "linux"
  #     arch: "x64"
  #   artifact_paths:
  #     - "release/bun-linux-x64-baseline.zip"
  #   command: |
  #     docker buildx build . \
  #       --platform="linux/amd64" \
  #       --target="artifact" \
  #       --output="type=local,dest=release" \
  #       --build-arg="GIT_SHA=$(git rev-parse HEAD)" \
  #       --build-arg="TRIPLET=x86_64-linux-gnu" \
  #       --build-arg="ARCH=x86_64" \
  #       --build-arg="BUILDARCH=amd64" \
  #       --build-arg="BUILD_MACHINE_ARCH=x86_64" \
  #       --build-arg="CPU_TARGET=nehalem" \
  #       --build-arg="ASSERTIONS=OFF" \
  #       --build-arg="ZIG_OPTIMIZE=ReleaseFast" \
  #       --build-arg="CANARY=1" \
  #       --progress="plain"
  #     cd release
  #     chmod +x bun-profile bun
  #     mkdir bun-linux-x64-baseline-profile
  #     mkdir bun-linux-x64-baseline
  #     strip bun
  #     mv bun-profile bun-linux-x64-baseline-profile/bun-profile
  #     mv bun bun-linux-x64-baseline/bun
  #     zip -r bun-linux-x64-baseline-profile.zip bun-linux-x64-baseline-profile
  #     zip -r bun-linux-x64-baseline.zip bun-linux-x64-baseline
